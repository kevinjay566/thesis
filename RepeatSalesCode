# thesis redo with emphasis on the price gradients for USA Parkway
options(scipen=999)

setwd("C:/Users/Kevin/Documents/The Thesis.")
library(data.table)
library(readxl)
library(plyr)
library(dplyr)

#data
house1<-fread("Quick_Info.txt", header = TRUE)
latlongwashoe<-fread("Addresses.csv", header = TRUE)
zipcode <- read_excel("zipcodeforthesis.xlsx", sheet = 1)
zipcode <- as.data.frame(zipcode)
colnames(zipcode)[1] <- "Zip"

colnames(house1)[1] <- "PIN"

house1 <- house1[!duplicated(house1$PIN)]
latlongwashoe <- latlongwashoe[!duplicated(latlongwashoe$PIN)]




#get those lats and longs!

house <- merge(house1, latlongwashoe, by = "PIN", all.x=TRUE)
house <- na.omit(house, cols = c("X", "Y"))

house <- merge(zipcode, house, by = "Zip")





#install.packages("geosphere")
library(geosphere)


# Onramp data -------------------------------------------------------------
# on ramp as the crow flies
onramp <- matrix(c(-119.999279	,	39.504466	, 
                   -119.992820	,	39.511602	, 
                   -119.964389	,	39.510956	, 
                   -119.937781	,	39.509847	, 
                   -119.926001	,	39.514565	, 
                   -119.887076	,	39.516038	, 
                   -119.862422	,	39.524198	, 
                   -119.830514	,	39.529329	, 
                   -119.814442	,	39.534973	, 
                   -119.803349	,	39.536412	, 
                   -119.778758	,	39.535420	, 
                   -119.765454	,	39.533914	, 
                   -119.752966	,	39.534079	, 
                   -119.738546	,	39.533384	, 
                   -119.715201	,	39.528071	, 
                   -119.700717	,	39.526185	, 
                   -119.653424	,	39.511535	, 
                   -119.629820	,	39.519216	, 
                   -119.486618	,	39.566238	, 
                   -119.996457	,	39.668056	, 
                   -119.958385	,	39.643746	, 
                   -119.915964	,	39.626364	, 
                   -119.881970	,	39.619026	, 
                   -119.851007	,	39.611075	, 
                   -119.837691	,	39.599898	, 
                   -119.826432	,	39.589693	, 
                   -119.808460	,	39.573979	, 
                   -119.791391	,	39.558817	, 
                   -119.788120	,	39.556313	, 
                   -119.788071	,	39.545461	, 
                   -119.783948	,	39.527486	, 
                   -119.783310	,	39.519809	, 
                   -119.780452	,	39.505832	, 
                   -119.784535	,	39.493014	, 
                   -119.790838	,	39.476924	, 
                   -119.788133	,	39.467666	, 
                   -119.775987	,	39.449737	, 
                   -119.765193	,	39.439096	, 
                   -119.751311	,	39.422954	, 
                   -119.750316	,	39.409134	, 
                   -119.826041	,	39.305580	, 
                   -119.806666	,	39.213408), 
                 byrow = TRUE, nrow = 42)

#############

# last thing to do is correspond the house$names to the actual data points.  

p1 <- house[, c("X", "Y")]

distancematrix <- distm(p1, onramp, fun = distHaversine)
distancematrix <- data.frame(distancematrix)

#colnames of the onramps########
colnames(distancematrix) <- c("39.504466+-119.999279"	, 
                              "39.511602+-119.992820"	, 
                              "39.510956+-119.964389"	, 
                              "39.509847+-119.937781"	, 
                              "39.514565+-119.926001"	, 
                              "39.516038+-119.887076"	, 
                              "39.524198+-119.862422"	, 
                              "39.529329+-119.830514"	, 
                              "39.534973+-119.814442"	, 
                              "39.536412+-119.803349"	, 
                              "39.535420+-119.778758"	, 
                              "39.533914+-119.765454"	, 
                              "39.534079+-119.752966"	, 
                              "39.533384+-119.738546"	, 
                              "39.528071+-119.715201"	, 
                              "39.526185+-119.700717"	, 
                              "39.511535+-119.653424"	, 
                              "39.519216+-119.629820"	, 
                              "39.566238+-119.486618"	, 
                              "39.668056+-119.996457"	, 
                              "39.643746+-119.958385"	, 
                              "39.626364+-119.915964"	, 
                              "39.619026+-119.881970"	, 
                              "39.611075+-119.851007"	, 
                              "39.599898+-119.837691"	, 
                              "39.589693+-119.826432"	, 
                              "39.573979+-119.808460"	, 
                              "39.558817+-119.791391"	, 
                              "39.556313+-119.788120"	, 
                              "39.545461+-119.788071"	, 
                              "39.527486+-119.783948"	, 
                              "39.519809+-119.783310"	, 
                              "39.505832+-119.780452"	, 
                              "39.493014+-119.784535"	, 
                              "39.476924+-119.790838"	, 
                              "39.467666+-119.788133"	, 
                              "39.449737+-119.775987"	, 
                              "39.439096+-119.765193"	, 
                              "39.422954+-119.751311"	, 
                              "39.409134+-119.750316"	, 
                              "39.305580+-119.826041"	, 
                              "39.213408+-119.806666")

#########

#  Colnames for distancematrix #####
#Colnames for distance matrix
#colnames(distancematrix) <- c("-119.999279,39.504466", 
"-119.992820,39.511602"	, 
"-119.964389,39.510956"	, 
"-119.937781,39.509847"	, 
"-119.926001,39.514565"	, 
"-119.887076,39.516038"	, 
"-119.862422,39.524198"	, 
"-119.830514,39.529329"	, 
"-119.814442,39.534973"	, 
"-119.803349,39.536412"	, 
"-119.778758,39.535420"	, 
"-119.765454,39.533914"	, 
"-119.752966,39.534079"	, 
"-119.738546,39.533384"	, 
"-119.715201,39.528071"	, 
"-119.700717,39.526185"	, 
"-119.653424,39.511535"	, 
"-119.629820,39.519216"	, 
"-119.486618,39.566238"	, 
"-119.996457,39.668056"	, 
"-119.958385,39.643746"	, 
"-119.915964,39.626364"	, 
"-119.881970,39.619026"	, 
"-119.851007,39.611075"	, 
"-119.837691,39.599898"	, 
"-119.826432,39.589693"	, 
"-119.808460,39.573979"	, 
"-119.791391,39.558817"	, 
"-119.788120,39.556313"	, 
"-119.788071,39.545461"	, 
"-119.783948,39.527486"	, 
"-119.783310,39.519809"	, 
"-119.780452,39.505832"	, 
"-119.784535,39.493014"	, 
"-119.790838,39.476924"	, 
"-119.788133,39.467666"	, 
"-119.775987,39.449737"	, 
"-119.765193,39.439096"	, 
"-119.751311,39.422954"	, 
"-119.750316,39.409134"	, 
"-119.826041,39.305580"	, 
"-119.806666,39.213408")







#####

mindist <- apply(distancematrix, 1, FUN = min)

names <- as.vector(colnames(distancematrix)[apply(distancematrix, 1, which.min)])

house <- cbind(house, mindist, names)
house$names <- gsub(',', '+', house$names)



house$mindistsquare <- house[, "mindist"]^2



house<-house %>%
  filter(LandUse == 200 | LandUse == 210 | LandUse == 250 | LandUse == 300 | LandUse == 310)





#dates
house$SDAT1<-as.Date(house$SDAT1, "%m/%d/%Y")
house$SDAT2<-as.Date(house$SDAT2, "%m/%d/%Y")
house$SDAT3<-as.Date(house$SDAT3, "%m/%d/%Y")
house$SDAT4<-as.Date(house$SDAT4, "%m/%d/%Y")
house$SDAT5<-as.Date(house$SDAT5, "%m/%d/%Y")
house$SDAT6<-as.Date(house$SDAT6, "%m/%d/%Y")

house$SDAT1year <- format(as.Date(house$SDAT1, format = "%m/%d/%Y"), "%Y")
house$SDAT2year <- format(as.Date(house$SDAT2, format = "%m/%d/%Y"), "%Y")
house$SDAT3year <- format(as.Date(house$SDAT3, format = "%m/%d/%Y"), "%Y")
house$SDAT4year <- format(as.Date(house$SDAT4, format = "%m/%d/%Y"), "%Y")
house$SDAT5year <- format(as.Date(house$SDAT5, format = "%m/%d/%Y"), "%Y")
house$SDAT6year <- format(as.Date(house$SDAT6, format = "%m/%d/%Y"), "%Y")


house$age <- as.numeric(house[,"SDATyear"]) - as.numeric(house[, "YearBlt"])

house$age2 <- (house$age)^2



house$SAMT1log <- log(house$SAMT1)
house$SAMT2log <- log(house$SAMT2)
house$SAMT3log <- log(house$SAMT3)
house$SAMT4log <- log(house$SAMT4)
house$SAMT5log <- log(house$SAMT5)
house$SAMT6log <- log(house$SAMT6)

#house$maxprice <- pmax(house$SAMT1, house$SAMT2, house$SAMT3, house$SAMT4, house$SAMT5, house$SAMT6)




# reno arch gms coords

p1 <- house[, c("X", "Y")]

arch <- matrix(c(-119.813657, 39.528019), 
               byrow = T,
               nrow = 1)


house$archdistance <- distHaversine(arch, p1, r=6378137)
house$logarch <- log(house$archdistance)


# are you to the left or right of the arch?
house$left <- as.numeric(house$X <= -119.813657)
house$right <- as.numeric(house$X > -119.813657)



##############################################################

salesforrepeat <- house[,c("SAMT1", "SDAT1year", "SAMT2", "SDAT2year", "SAMT3", "SDAT3year", "SAMT4", "SDAT4year", "SAMT5", "SDAT5year", "SAMT6", "SDAT6year")]
#107408x6


#cant get rid of empties in R so I have to use excel
#first, find all zeros and replace with empty, then use the function to select all empties and delte them while shifting left.  Boom done.  I had to do it in 10 stages or so because excel is so darn slow and could only do 10k at a time.  This tested my patience more than anything else in in this project.  fuck excel.  Or maybe me for not being able to do this in excel.  Either way im so excited to never do that again.  
#write.table(salesforrepeat, file = "salesforrepeat3.csv", sep = ",")

library("xlsx")
repeatsalesfromexcel <- read.csv("salesforrepeat2.csv", header = TRUE)


house <- cbind(house,repeatsalesfromexcel)




house$SDAT1hedonic <- format(as.Date(house$SDAT1), "%Y-%m")
house$SDAT2hedonic <- format(as.Date(house$SDAT2), "%Y-%m")
house$SDAT3hedonic <- format(as.Date(house$SDAT3), "%Y-%m")
house$SDAT4hedonic <- format(as.Date(house$SDAT4), "%Y-%m")
house$SDAT5hedonic <- format(as.Date(house$SDAT5), "%Y-%m")
house$SDAT6hedonic <- format(as.Date(house$SDAT6), "%Y-%m")





inflation <- read.csv("CPIAUCSL.csv", header = TRUE)
inflation$DATE <- as.Date(inflation$DATE, "%d/%m/%Y")
#2017 dollarz
inflation$CPIAUCSL <- inflation$CPIAUCSL/247.963


inflation$SDAT1hedonic <- format(as.Date(inflation$DATE), "%Y-%d")
inflation$SDAT2hedonic <- format(as.Date(inflation$DATE), "%Y-%d")
inflation$SDAT3hedonic <- format(as.Date(inflation$DATE), "%Y-%d")
inflation$SDAT4hedonic <- format(as.Date(inflation$DATE), "%Y-%d")
inflation$SDAT5hedonic <- format(as.Date(inflation$DATE), "%Y-%d")
inflation$SDAT6hedonic <- format(as.Date(inflation$DATE), "%Y-%d")



inflation1 <- inflation[, c("CPIAUCSL", "SDAT1hedonic")]
names(inflation1)[1] <- "CPIAUCSL1"
inflation2 <- inflation[, c("CPIAUCSL", "SDAT2hedonic")]
names(inflation2)[1] <- "CPIAUCSL2"
inflation3 <- inflation[, c("CPIAUCSL", "SDAT3hedonic")]
names(inflation3)[1] <- "CPIAUCSL3"
inflation4 <- inflation[, c("CPIAUCSL", "SDAT4hedonic")]
names(inflation4)[1] <- "CPIAUCSL4"
inflation5 <- inflation[, c("CPIAUCSL", "SDAT5hedonic")]
names(inflation5)[1] <- "CPIAUCSL5"
inflation6 <- inflation[, c("CPIAUCSL", "SDAT6hedonic")]
names(inflation6)[1] <- "CPIAUCSL6"





house <- join(house, inflation1, by = "SDAT1hedonic")
house <- join(house, inflation2, by = "SDAT2hedonic")
house <- join(house, inflation3, by = "SDAT3hedonic")
house <- join(house, inflation4, by = "SDAT4hedonic")
house <- join(house, inflation5, by = "SDAT5hedonic")
house <- join(house, inflation6, by = "SDAT6hedonic")


house$sale1inflation <- house$sale1/house$CPIAUCSL1
house$sale2inflation <- house$sale2/house$CPIAUCSL2
house$sale3inflation <- house$sale3/house$CPIAUCSL3
house$sale4inflation <- house$sale4/house$CPIAUCSL4
house$sale5inflation <- house$sale5/house$CPIAUCSL5
house$sale6inflation <- house$sale6/house$CPIAUCSL6


#averages
averages <- data.frame(stack(house[, c("sale1inflation", "sale2inflation", "sale3inflation", "sale4inflation", "sale5inflation", "sale6inflation")]))
averages$valueslogged <- log(averages$values)
mean(subset(averages, values >= 5000)$valueslogged)
sd(subset(averages, values >= 5000)$valueslogged)


##########################################################




#unemployment data from the St. Louis FRED
#https://fred.stlouisfed.org/series/NVWASH7URN
# cyclical!!!!!!!!
#unemployment <- read.csv("NVWASH7URN.csv", header = TRUE)
#unemployment$DATE <- as.Date(unemployment$DATE, "%d/%m/%Y")
#unemployment$SDAThedonic <- format(as.Date(unemployment$DATE), "%Y-%d")


# 30 fixed mortgage rate over time. 
# Also from FRED
#mortgage30 <- read.csv("MORTGAGE30US.CSV", header = TRUE)
#mortgage30$DATE <- as.Date(mortgage30$DATE, "%m/%d/%Y")
#mortgage30$SDAThedonic <- format(as.Date(mortgage30$DATE), "%Y-%m")
#mortgage30 <- mortgage30[!duplicated(mortgage30$SDAThedonic), ]


#inflation adjustments
#inflation <- read.csv("CPIAUCSL.csv", header = TRUE)
#inflation$DATE <- as.Date(inflation$DATE, "%d/%m/%Y")
#inflation$SDAThedonic <- format(as.Date(inflation$DATE), "%Y-%d")

#new var for house to match the other data

#house$SDAT1hedonic <- format(as.Date(house$SDAT1), "%Y-%m")
#house$SDAT2hedonic <- format(as.Date(house$SDAT2), "%Y-%m")
#house$SDAT3hedonic <- format(as.Date(house$SDAT3), "%Y-%m")
#house$SDAT4hedonic <- format(as.Date(house$SDAT4), "%Y-%m")
#house$SDAT5hedonic <- format(as.Date(house$SDAT5), "%Y-%m")
#house$SDAT6hedonic <- format(as.Date(house$SDAT6), "%Y-%m")



# MERGE MERGE MERGE MERGE MERGE 
#house1 <- join(house, unemployment, by = "SDAThedonic")
#house2 <- join(househedonic, mortgage30, by = "SDAThedonic")
#house3 <- join(househedonic1, inflation, by = "SDAThedonic")
#this is inefficient and terrible code but idgaf to fix it at this point. 
#house <- househedonic2
#house$CPIAUCSL <- househedonic$CPIAUCSL/100
#house$SAMTinflation <- househedonic$SAMT/househedonic$CPIAUCSL
#house$loginflationSAMT <- log(househedonic$SAMTinflation)


















#create the repeated sales dataset in its final composition

salepair2 <- subset(house, numberofsales == 2)
salepair3 <- subset(house, numberofsales == 3)
salepair4 <- subset(house, numberofsales == 4)
salepair5 <- subset(house, numberofsales == 5)
salepair6 <- subset(house, numberofsales == 6)


#inflation adjustments








unemployment <- read.csv("NVWASH7URN.csv", header = TRUE)
unemployment$DATE <- as.Date(unemployment$DATE, "%d/%m/%Y")
unemployment$SDAThedonic <- format(as.Date(unemployment$DATE), "%Y-%d")


# 30 fixed mortgage rate over time. 
# Also from FRED
mortgage30 <- read.csv("MORTGAGE30US.CSV", header = TRUE)
mortgage30$DATE <- as.Date(mortgage30$DATE, "%m/%d/%Y")
mortgage30$SDAThedonic <- format(as.Date(mortgage30$DATE), "%Y-%m")
mortgage30 <- mortgage30[!duplicated(mortgage30$SDAThedonic), ]


# MERGE MERGE MERGE MERGE MERGE 
#house1 <- join(house, unemployment, by = "SDAThedonic")
#house2 <- join(househedonic, mortgage30, by = "SDAThedonic")
#house3 <- join(househedonic1, inflation, by = "SDAThedonic")
#this is inefficient and terrible code but idgaf to fix it at this point. 
#house <- househedonic2
#house$CPIAUCSL <- househedonic$CPIAUCSL/100
#house$SAMTinflation <- househedonic$SAMT/househedonic$CPIAUCSL
#house$loginflationSAMT <- log(househedonic$SAMTinflation)




#number of sales pairs in the repeated sales data set will be 76151 which comes down 107408 or 70% of the data size.  What homes are included in that 30%???????????



salepair2$REPEAT <- log(salepair2$sale1inflation/salepair2$sale2inflation)
salepair2$positiveone <- salepair2$X1year
salepair2$negativeone <- salepair2$X2year
salepair2$levelREPEAT <- salepair2$sale1inflation
names(mortgage30)[3] <- "SDAT1hedonic"
salepair2 <- join(salepair2, mortgage30, by = "SDAT1hedonic")
names(unemployment)[3] <- "SDAT1hedonic"
salepair2$age <- 2018-salepair2$X1year
salepair2 <- join(salepair2, unemployment, by = "SDAT1hedonic")


salepair3$REPEAT <- log(salepair3$sale2inflation/salepair3$sale3inflation)
salepair3$positiveone <- salepair3$X2year
salepair3$negativeone <- salepair3$X3year
salepair3$levelREPEAT <- salepair3$sale2inflation
names(mortgage30)[3] <- "SDAT2hedonic"
salepair3 <- join(salepair3, mortgage30, by = "SDAT2hedonic")
names(unemployment)[3] <- "SDAT2hedonic"
salepair3$age <- 2018-salepair3$X2year
salepair3 <- join(salepair3, unemployment, by = "SDAT2hedonic")



salepair4$REPEAT <- log(salepair4$sale3inflation/salepair4$sale4inflation)
salepair4$positiveone <- salepair4$X3year
salepair4$negativeone <- salepair4$X4year
salepair4$levelREPEAT <- salepair4$sale3inflation
names(mortgage30)[3] <- "SDAT3hedonic"
salepair4 <- join(salepair4, mortgage30, by = "SDAT3hedonic")
names(unemployment)[3] <- "SDAT3hedonic"
salepair4$age <- 2018-salepair4$X3year
salepair4 <- join(salepair4, unemployment, by = "SDAT3hedonic")



salepair5$REPEAT <- log(salepair5$sale4inflation/salepair5$sale5inflation)
salepair5$positiveone <- salepair5$X4year
salepair5$negativeone <- salepair5$X5year
salepair5$levelREPEAT <- salepair5$sale4inflation
names(mortgage30)[3] <- "SDAT4hedonic"
salepair5 <- join(salepair5, mortgage30, by = "SDAT4hedonic")
names(unemployment)[3] <- "SDAT4hedonic"
salepair5$age <- 2018-salepair5$X4year
salepair5 <- join(salepair5, unemployment, by = "SDAT4hedonic")



salepair6$REPEAT <- log(salepair6$sale5inflation/salepair6$sale6inflation)
salepair6$positiveone <- salepair6$X5year
salepair6$negativeone <- salepair6$X6year
salepair6$levelREPEAT <- salepair6$sale5inflation
names(mortgage30)[3] <- "SDAT5hedonic"
salepair6 <- join(salepair6, mortgage30, by = "SDAT5hedonic")
names(unemployment)[3] <- "SDAT5hedonic"
salepair6$age <- 2018-salepair6$X5year
salepair6 <- join(salepair6, unemployment, by = "SDAT5hedonic")



repeatsalesalmosttheredataset <- rbind(salepair2, salepair3, salepair4, salepair5, salepair6)
#rename, that was a dumn name
finally <- repeatsalesalmosttheredataset

finallydisrepair <- finally
finally$agesquared <- finally$age^2
#the years in positiveone/negativeone are all lined up so no worries about year dummy stuff.  
############################


finally$twostory <- ifelse(finally$Stories == "TWO STORY", 1, ".")


#this is such embarassing code. go back and write this as a function!!! 

finally$year1970 <- ifelse(finally$positive ==1970, 1, ifelse(finally$negative ==1970, -1, 0))

finally$year1971 <- ifelse(finally$positive ==1971, 1, ifelse(finally$negative ==1971, -1, 0))

finally$year1972 <- ifelse(finally$positive ==1972, 1, ifelse(finally$negative ==1972, -1, 0))

finally$year1973 <- ifelse(finally$positive ==1973, 1, ifelse(finally$negative ==1973, -1, 0))

finally$year1974 <- ifelse(finally$positive ==1974, 1, ifelse(finally$negative ==1974, -1, 0))

finally$year1975 <- ifelse(finally$positive ==1975, 1, ifelse(finally$negative ==1975, -1, 0))

finally$year1976 <- ifelse(finally$positive ==1976, 1, ifelse(finally$negative ==1976, -1, 0))

finally$year1977 <- ifelse(finally$positive ==1977, 1, ifelse(finally$negative ==1977, -1, 0))

finally$year1978 <- ifelse(finally$positive ==1978, 1, ifelse(finally$negative ==1978, -1, 0))

finally$year1979 <- ifelse(finally$positive ==1979, 1, ifelse(finally$negative ==1979, -1, 0))

finally$year1980 <- ifelse(finally$positive ==1980, 1, ifelse(finally$negative ==1980, -1, 0))

finally$year1981 <- ifelse(finally$positive ==1981, 1, ifelse(finally$negative ==1981, -1, 0))

finally$year1982 <- ifelse(finally$positive ==1982, 1, ifelse(finally$negative ==1982, -1, 0))

finally$year1983 <- ifelse(finally$positive ==1983, 1, ifelse(finally$negative ==1983, -1, 0))

finally$year1984 <- ifelse(finally$positive ==1984, 1, ifelse(finally$negative ==1984, -1, 0))

finally$year1985 <- ifelse(finally$positive ==1985, 1, ifelse(finally$negative ==1985, -1, 0))

finally$year1986 <- ifelse(finally$positive ==1986, 1, ifelse(finally$negative ==1986, -1, 0))

finally$year1987 <- ifelse(finally$positive ==1987, 1, ifelse(finally$negative ==1987, -1, 0))

finally$year1988 <- ifelse(finally$positive ==1988, 1, ifelse(finally$negative ==1988, -1, 0))

finally$year1989 <- ifelse(finally$positive ==1989, 1, ifelse(finally$negative ==1989, -1, 0))

finally$year1990 <- ifelse(finally$positive ==1990, 1, ifelse(finally$negative ==1990, -1, 0))

finally$year1991 <- ifelse(finally$positive ==1991, 1, ifelse(finally$negative ==1991, -1, 0))

finally$year1992 <- ifelse(finally$positive ==1992, 1, ifelse(finally$negative ==1992, -1, 0))

finally$year1993 <- ifelse(finally$positive ==1993, 1, ifelse(finally$negative ==1993, -1, 0))

finally$year1994 <- ifelse(finally$positive ==1994, 1, ifelse(finally$negative ==1994, -1, 0))

finally$year1995 <- ifelse(finally$positive ==1995, 1, ifelse(finally$negative ==1995, -1, 0))

finally$year1996 <- ifelse(finally$positive ==1996, 1, ifelse(finally$negative ==1996, -1, 0))

finally$year1997 <- ifelse(finally$positive ==1997, 1, ifelse(finally$negative ==1997, -1, 0))

finally$year1998 <- ifelse(finally$positive ==1998, 1, ifelse(finally$negative ==1998, -1, 0))

finally$year1999 <- ifelse(finally$positive ==1999, 1, ifelse(finally$negative ==1999, -1, 0))

finally$year2000 <- ifelse(finally$positive ==2000, 1, ifelse(finally$negative ==2000, -1, 0))

finally$year2001 <- ifelse(finally$positive ==2001, 1, ifelse(finally$negative ==2001, -1, 0))

finally$year2002 <- ifelse(finally$positive ==2002, 1, ifelse(finally$negative ==2002, -1, 0))

finally$year2003 <- ifelse(finally$positive ==2003, 1, ifelse(finally$negative ==2003, -1, 0))

finally$year2004 <- ifelse(finally$positive ==2004, 1, ifelse(finally$negative ==2004, -1, 0))

finally$year2005 <- ifelse(finally$positive ==2005, 1, ifelse(finally$negative ==2005, -1, 0))

finally$year2006 <- ifelse(finally$positive ==2006, 1, ifelse(finally$negative ==2006, -1, 0))

finally$year2007 <- ifelse(finally$positive ==2007, 1, ifelse(finally$negative ==2007, -1, 0))

finally$year2008 <- ifelse(finally$positive ==2008, 1, ifelse(finally$negative ==2008, -1, 0))

finally$year2009 <- ifelse(finally$positive ==2009, 1, ifelse(finally$negative ==2009, -1, 0))

finally$year2010 <- ifelse(finally$positive ==2010, 1, ifelse(finally$negative ==2010, -1, 0))

finally$year2011 <- ifelse(finally$positive ==2011, 1, ifelse(finally$negative ==2011, -1, 0))

finally$year2012 <- ifelse(finally$positive ==2012, 1, ifelse(finally$negative ==2012, -1, 0))

finally$year2013 <- ifelse(finally$positive ==2013, 1, ifelse(finally$negative ==2013, -1, 0))

finally$year2014 <- ifelse(finally$positive ==2014, 1, ifelse(finally$negative ==2014, -1, 0))

finally$year2015 <- ifelse(finally$positive ==2015, 1, ifelse(finally$negative ==2015, -1, 0))

finally$year2016 <- ifelse(finally$positive ==2016, 1, ifelse(finally$negative ==2016, -1, 0))

finally$year2017 <- ifelse(finally$positive ==2017, 1, ifelse(finally$negative ==2017, -1, 0))

summary(lm(loginflationSAMT1 ~ BldgSF + age + age2 + LandSize + mindist + mindistsquare + Owner + FullBaths + logarch, data = subset(househedonic, right == 1 & loginflationSAMT1 >0)))

########
#count the number of sales each year







summary(lm(REPEAT ~ BldgSF + LandSize + mindist + mindistsquare + Owner + FullBaths + MORTGAGE30US + NVWASH7URN + age +agesquared + twostory + archdistance + right +archdistance
           + year1970
           + year1971
           + year1972
           + year1973
           + year1974
           + year1975
           + year1976
           + year1977
           + year1978
           + year1979
           + year1980
           + year1981
           + year1982
           + year1983
           + year1984
           + year1985
           + year1986
           + year1987
           + year1988
           + year1989
           + year1990
           + year1991
           + year1992
           + year1993
           + year1994
           + year1995
           + year1996
           + year1997
           + year1998
           + year1999
           + year2000
           + year2001
           + year2002
           + year2003
           + year2004
           + year2005
           + year2006
           + year2007
           + year2008
           + year2009
           + year2010
           + year2011
           + year2012
           + year2013
           + year2014
           + year2015
           + year2016
           + year2017, data = subset(finally, REPEAT < 30000000 & (Stories == "SINGLE STORY" | Stories == "TWO STORY"))))




length(which(year1970==1))
length(which(year1970==-1))
length(which(year1970==0))

length(which(year1970==1))+length(which(year1970==-1))+length(which(year1970==0))



############################
# now lets look at the mean and sigma and use that and the 2 sigma to make informed decisions about regression differences in the previous file for hedonic approach. 


mean(subset(finally, levelREPEAT < 1000000)$levelREPEAT)
sd(subset(finally, levelREPEAT < 1000000)$levelREPEAT)

#descriptive stats of the repeated sale:
mean(subset(finally, levelREPEAT < 1000000 & numberofsales == 2)$levelREPEAT)
mean(subset(finally, levelREPEAT < 1000000 & numberofsales == 3)$levelREPEAT)
mean(subset(finally, levelREPEAT < 1000000 & numberofsales == 4)$levelREPEAT)
mean(subset(finally, levelREPEAT < 1000000 & numberofsales == 5)$levelREPEAT)
mean(subset(finally, levelREPEAT < 1000000 & numberofsales == 6)$levelREPEAT)


median(subset(finally, levelREPEAT < 1000000 & numberofsales == 2)$levelREPEAT)
median(subset(finally, levelREPEAT < 1000000 & numberofsales == 3)$levelREPEAT)
median(subset(finally, levelREPEAT < 1000000 & numberofsales == 4)$levelREPEAT)
median(subset(finally, levelREPEAT < 1000000 & numberofsales == 5)$levelREPEAT)
median(subset(finally, levelREPEAT < 1000000 & numberofsales == 6)$levelREPEAT)

dim(subset(finally, numberofsales == 2))
dim(subset(finally, numberofsales == 3))
dim(subset(finally, numberofsales == 4))
dim(subset(finally, numberofsales == 5))
dim(subset(finally, numberofsales == 6))






summary(lm(REPEAT ~ BldgSF + LandSize + mindist + mindistsquare + Owner + archdistance
           + year1970
           + year1971
           + year1972
           + year1973
           + year1974
           + year1975
           + year1976
           + year1977
           + year1978
           + year1979
           + year1980
           + year1981
           + year1982
           + year1983
           + year1984
           + year1985
           + year1986
           + year1987
           + year1988
           + year1989
           + year1990
           + year1991
           + year1992
           + year1993
           + year1994
           + year1995
           + year1996
           + year1997
           + year1998
           + year1999
           + year2000
           + year2001
           + year2002
           + year2003
           + year2004
           + year2005
           + year2006
           + year2007
           + year2008
           + year2009
           + year2010
           + year2011
           + year2012
           + year2013
           + year2014
           + year2015
           + year2016
           + year2017, data = subset(finallymillion, REPEAT > 1 & REPEAT < 40000000)))



